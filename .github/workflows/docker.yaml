name: Build Docker Images

on:
  push:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  generate-matrix:
    name: Generate Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate matrix
        id: generate-matrix
        run: |
          DIRS=$(find . -maxdepth 1 -mindepth 1 -type d -not -name ".*" -printf '%f\n' | jq -c -s -R 'split("\n")[:-1]')
          echo "matrix=$DIRS" >> $GITHUB_OUTPUT

  build:
    if: needs.generate-matrix.outputs.matrix != '[]'
    name: Build Docker Image
    needs: generate-matrix
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get config for directory
        id: get-config
        run: |
          [ -f "${{ matrix.dir }}/PULL" ] && echo "PULL=true" >> $GITHUB_ENV || echo "PULL=false" >> $GITHUB_ENV
          echo "repo=$(cat "${{ matrix.dir }}/REPO")" >> $GITHUB_OUTPUT
      - name: Check for latest release
        run: |
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/${{ steps.get-config.outputs.repo }}/releases/latest" | jq -r .tag_name)
          [ -f "${{ matrix.dir }}/LATEST_RELEASE" ] && PREVIOUS_RELEASE=$(cat "${{ matrix.dir }}/LATEST_RELEASE") || PREVIOUS_RELEASE=""
          echo "PUSH=false" >> $GITHUB_ENV
          if [ "$LATEST_RELEASE" != "$PREVIOUS_RELEASE" ]; then
            echo "${{ env.NEW_RELEASE }}" > "${{ matrix.dir }}/LATEST_RELEASE"
            echo "NEW_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
            echo "PUSH=true" >> $GITHUB_ENV
            echo "New release detected: $LATEST_RELEASE"
          elif [ "${{ github.event_name }}" == "push" ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "NEW_RELEASE=bypass" >> $GITHUB_ENV
            echo "Bypassing change check due to code change or manual run."
          else
            echo "NEW_RELEASE=false" >> $GITHUB_ENV
            echo "No new release."
          fi
      - name: Commit the latest release
        continue-on-error: true
        if: env.PUSH != 'false'
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git add "${{ matrix.dir }}/LATEST_RELEASE"
          git commit -m "Update latest release for ${{ steps.get-repo.outputs.repo }} to ${{ env.NEW_RELEASE }}"
          git push
      - name: Checkout repository
        if: env.PULL != 'false'
        uses: actions/checkout@v4
        with:
          path: ${{ matrix.dir }}
          repository: ${{ steps.get-repo.outputs.repo }}
      - name: Set up Docker Buildx
        if: env.NEW_RELEASE != 'false'
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        if: env.NEW_RELEASE != 'false'
        uses: docker/setup-qemu-action@v3
      - name: Login to GitHub Container Registry
        if: env.NEW_RELEASE != 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PUSH_TOKEN }}
      - name: Build and push multi-platform Docker image for ${{ matrix.dir }}
        if: env.NEW_RELEASE != 'false'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.dir }}
          push: true
          platforms: |
            linux/amd64
            linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.dir }}:${{ env.NEW_RELEASE }}
            ghcr.io/${{ github.repository_owner }}/${{ matrix.dir }}:latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        dir: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
