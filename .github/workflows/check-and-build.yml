name: Check Releases & Build

on:
  push:
    paths:
      - "**/*"
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:
    inputs:
      bypass_check:
        default: "false"
        description: "Bypass New Version Check"

permissions:
  contents: write
  packages: write

jobs:
  generate-matrix:
    name: Generate Matrix
    outputs:
      matrix: ${{ env.MATRIX }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Generate matrix
        id: set-matrix
        run: |
          DIRS=$(find . -maxdepth 1 -mindepth 1 -not -name ".*" -type d)
          FIRST=true

          MATRIX="{\"include\":["
          for DIR in $DIRS; do
            REPO=$(cat $DIR/REPO)
            if [ $FIRST = true ]; then
              FIRST=false
            else
              MATRIX="$MATRIX,"
            fi
            MATRIX="$MATRIX{\"dir\":\"${DIR#./}\",\"repo\":\"$REPO\"}"
          done
          MATRIX="$MATRIX]}"

          echo "MATRIX=$MATRIX" >> $GITHUB_ENV

  check-releases-and-build:
    name: Check Releases & Build
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Check for latest release for ${{ matrix.dir }}
        run: |
          if [ -f ${{ matrix.dir }}/LATEST_RELEASE ]; then
            PREVIOUS_RELEASE=$(cat ${{ matrix.dir }}/LATEST_RELEASE)
            echo "Previous release: $PREVIOUS_RELEASE"
          else
            PREVIOUS_RELEASE=""
            echo "Previous release: Not Found"
          fi

          LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ matrix.repo }}/releases/latest | jq -r .tag_name)
          echo "Latest release: $LATEST_RELEASE"

          if [ "$LATEST_RELEASE" != "$PREVIOUS_RELEASE" ]; then
            echo "NEW_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
            echo "New release detected: $LATEST_RELEASE"
          elif [ "${{ github.event.inputs.bypass_check }}" == "true" ]; then
            echo "NEW_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
            echo "Bypassing version check as requested."
          else
            echo "NEW_RELEASE=false" >> $GITHUB_ENV
            echo "No new release."
          fi

      - name: Save the latest release for ${{ matrix.dir }}
        if: env.NEW_RELEASE != 'false'
        run: echo "${{ env.NEW_RELEASE }}" > ${{ matrix.dir }}/LATEST_RELEASE

      - name: Commit the latest release for ${{ matrix.dir }}
        if: env.NEW_RELEASE != 'false'
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git add ${{ matrix.dir }}/LATEST_RELEASE
          git commit -m "Update latest release for ${{ matrix.repo }} to ${{ env.NEW_RELEASE }}"
          git push
          true

      - name: Set up Docker Buildx
        if: env.NEW_RELEASE != 'false'
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        if: env.NEW_RELEASE != 'false'
        uses: docker/setup-qemu-action@v3

      - name: Login to GitHub Container Registry
        if: env.NEW_RELEASE != 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push multi-platform Docker image for ${{ matrix.dir }}
        if: env.NEW_RELEASE != 'false'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.dir }}
          push: true
          platforms: |
            linux/amd64
            linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.dir }}:${{ env.NEW_RELEASE }}
            ghcr.io/${{ github.repository_owner }}/${{ matrix.dir }}:latest
